{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Personal documentation for all sort of thing, concept, tools, best practice, clean code, ...","title":"Home"},{"location":"#home","text":"Personal documentation for all sort of thing, concept, tools, best practice, clean code, ...","title":"Home"},{"location":"blue-green-deployment/","text":"Blue Green deployment Overview What is blue green deployment ? Blue Green deployment is a technique that reduces downtime and risk by running two identical production environments called Blue and Green. How it works ? At any time, only one of the environments is live, with the live environment serving all production traffic and the other environment being idle. We use a router to redirect all incoming traffic to the live environment. When we want to deploy new version of services we deploy only to the idle environment and after extensive testing we make the router switch environment. Now the environment that was idle is the live environment and has newest version of services. Advantages This technique can eliminate downtime due to app deployment. In addition, blue green deployment reduces risk: if something unexpected happens with your new version on Green, you can immediately roll back to the last version by switching back to Blue. Example As you prepare a new version of your software, deployment and the final stage of testing takes place in the environment that is not live: in this example, Green. Once you have deployed and fully tested the software in Green, you switch the router so all incoming requests now go to Green instead of Blue. Green is now live, and Blue is idle.","title":"Blue Green deployment"},{"location":"blue-green-deployment/#blue-green-deployment","text":"","title":"Blue Green deployment"},{"location":"blue-green-deployment/#overview","text":"","title":"Overview"},{"location":"blue-green-deployment/#what-is-blue-green-deployment","text":"Blue Green deployment is a technique that reduces downtime and risk by running two identical production environments called Blue and Green.","title":"What is blue green deployment ?"},{"location":"blue-green-deployment/#how-it-works","text":"At any time, only one of the environments is live, with the live environment serving all production traffic and the other environment being idle. We use a router to redirect all incoming traffic to the live environment. When we want to deploy new version of services we deploy only to the idle environment and after extensive testing we make the router switch environment. Now the environment that was idle is the live environment and has newest version of services.","title":"How it works ?"},{"location":"blue-green-deployment/#advantages","text":"This technique can eliminate downtime due to app deployment. In addition, blue green deployment reduces risk: if something unexpected happens with your new version on Green, you can immediately roll back to the last version by switching back to Blue.","title":"Advantages"},{"location":"blue-green-deployment/#example","text":"As you prepare a new version of your software, deployment and the final stage of testing takes place in the environment that is not live: in this example, Green. Once you have deployed and fully tested the software in Green, you switch the router so all incoming requests now go to Green instead of Blue. Green is now live, and Blue is idle.","title":"Example"},{"location":"docker/","text":"Docker What is docker ? Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker\u2019s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production. Advantages of docker Package and run an application in a loosely isolated environment called a container Containers are lightweight because they don\u2019t need the extra load of a hypervisor, but run directly within the host machine\u2019s kernel Isolation and security allow you to run many containers simultaneously on a given host Can run Docker containers within host machines that are actually virtual machines Easy and rapid app deployment to any cloud Scale app by multiplying the number of containers Usefull command Show all running containers docker ps Show all containers docker ps -a Show all images docker image ls Remove image docker image rm IMAGE_NAME Run a docker container from an image -d -> Dispatch, run in background -p -> Publish, map port 80 in the container to port 8080 on the docker host docker run -d -p 8080:80 IMAGE:TAG Build a docker image from a Dockerfile -t, Name and optionally a tag in the \u2018name:tag\u2019 format docker build -t NAME:TAG . What is a Dockerfile ? Docker can build images automatically by reading the instructions from a Dockerfile. A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. Simple Java Dockerfile FROM openjdk:15 ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} app.jar ENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]","title":"Docker"},{"location":"docker/#docker","text":"","title":"Docker"},{"location":"docker/#what-is-docker","text":"Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker\u2019s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.","title":"What is docker ?"},{"location":"docker/#advantages-of-docker","text":"Package and run an application in a loosely isolated environment called a container Containers are lightweight because they don\u2019t need the extra load of a hypervisor, but run directly within the host machine\u2019s kernel Isolation and security allow you to run many containers simultaneously on a given host Can run Docker containers within host machines that are actually virtual machines Easy and rapid app deployment to any cloud Scale app by multiplying the number of containers","title":"Advantages of docker"},{"location":"docker/#usefull-command","text":"Show all running containers docker ps Show all containers docker ps -a Show all images docker image ls Remove image docker image rm IMAGE_NAME Run a docker container from an image -d -> Dispatch, run in background -p -> Publish, map port 80 in the container to port 8080 on the docker host docker run -d -p 8080:80 IMAGE:TAG Build a docker image from a Dockerfile -t, Name and optionally a tag in the \u2018name:tag\u2019 format docker build -t NAME:TAG .","title":"Usefull command"},{"location":"docker/#what-is-a-dockerfile","text":"Docker can build images automatically by reading the instructions from a Dockerfile. A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession.","title":"What is a Dockerfile ?"},{"location":"docker/#simple-java-dockerfile","text":"FROM openjdk:15 ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} app.jar ENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]","title":"Simple Java Dockerfile"},{"location":"how-to-add-documentation/","text":"How to add documentation Preview documentation You can preview the documentation on localhost by running the following command : mkdocs serve Local server will be available at Localhost and has hot reload. Build documentation After modifying the documentation you need to rebuild it by running the following command : mkdocs build Deploy documentation Once the documentation is build you need to deploy it on github page to do so we run the following command : mkdocs gh-deploy Documentation will be updated on github page and can be accessed at Link","title":"How to add documentation"},{"location":"how-to-add-documentation/#how-to-add-documentation","text":"","title":"How to add documentation"},{"location":"how-to-add-documentation/#preview-documentation","text":"You can preview the documentation on localhost by running the following command : mkdocs serve Local server will be available at Localhost and has hot reload.","title":"Preview documentation"},{"location":"how-to-add-documentation/#build-documentation","text":"After modifying the documentation you need to rebuild it by running the following command : mkdocs build","title":"Build documentation"},{"location":"how-to-add-documentation/#deploy-documentation","text":"Once the documentation is build you need to deploy it on github page to do so we run the following command : mkdocs gh-deploy Documentation will be updated on github page and can be accessed at Link","title":"Deploy documentation"}]}