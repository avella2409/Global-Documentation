{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Personal documentation for all sort of thing, concept, tools, best practice, clean code, ...","title":"Home"},{"location":"#home","text":"Personal documentation for all sort of thing, concept, tools, best practice, clean code, ...","title":"Home"},{"location":"blue-green-deployment/","text":"Blue Green deployment Overview What is blue green deployment ? Blue Green deployment is a technique that reduces downtime and risk by running two identical production environments called Blue and Green. How it works ? At any time, only one of the environments is live, with the live environment serving all production traffic and the other environment being idle. We use a router to redirect all incoming traffic to the live environment. When we want to deploy new version of services we deploy only to the idle environment and after extensive testing we make the router switch environment. Now the environment that was idle is the live environment and has newest version of services. Advantages This technique can eliminate downtime due to app deployment. In addition, blue green deployment reduces risk: if something unexpected happens with your new version on Green, you can immediately roll back to the last version by switching back to Blue. Example As you prepare a new version of your software, deployment and the final stage of testing takes place in the environment that is not live: in this example, Green. Once you have deployed and fully tested the software in Green, you switch the router so all incoming requests now go to Green instead of Blue. Green is now live, and Blue is idle.","title":"Blue Green deployment"},{"location":"blue-green-deployment/#blue-green-deployment","text":"","title":"Blue Green deployment"},{"location":"blue-green-deployment/#overview","text":"","title":"Overview"},{"location":"blue-green-deployment/#what-is-blue-green-deployment","text":"Blue Green deployment is a technique that reduces downtime and risk by running two identical production environments called Blue and Green.","title":"What is blue green deployment ?"},{"location":"blue-green-deployment/#how-it-works","text":"At any time, only one of the environments is live, with the live environment serving all production traffic and the other environment being idle. We use a router to redirect all incoming traffic to the live environment. When we want to deploy new version of services we deploy only to the idle environment and after extensive testing we make the router switch environment. Now the environment that was idle is the live environment and has newest version of services.","title":"How it works ?"},{"location":"blue-green-deployment/#advantages","text":"This technique can eliminate downtime due to app deployment. In addition, blue green deployment reduces risk: if something unexpected happens with your new version on Green, you can immediately roll back to the last version by switching back to Blue.","title":"Advantages"},{"location":"blue-green-deployment/#example","text":"As you prepare a new version of your software, deployment and the final stage of testing takes place in the environment that is not live: in this example, Green. Once you have deployed and fully tested the software in Green, you switch the router so all incoming requests now go to Green instead of Blue. Green is now live, and Blue is idle.","title":"Example"},{"location":"docker/","text":"Docker What is docker ? Documentation in progress...","title":"Docker"},{"location":"docker/#docker","text":"","title":"Docker"},{"location":"docker/#what-is-docker","text":"Documentation in progress...","title":"What is docker ?"},{"location":"how-to-add-documentation/","text":"How to add documentation Preview documentation You can preview the documentation on localhost by running the following command : mkdocs serve Local server will be available at Localhost and has hot reload. Build documentation After modifying the documentation you need to rebuild it by running the following command : mkdocs build Deploy documentation Once the documentation is build you need to deploy it on github page to do so we run the following command : mkdocs gh-deploy Documentation will be updated on github page and can be accessed at Link","title":"How to add documentation"},{"location":"how-to-add-documentation/#how-to-add-documentation","text":"","title":"How to add documentation"},{"location":"how-to-add-documentation/#preview-documentation","text":"You can preview the documentation on localhost by running the following command : mkdocs serve Local server will be available at Localhost and has hot reload.","title":"Preview documentation"},{"location":"how-to-add-documentation/#build-documentation","text":"After modifying the documentation you need to rebuild it by running the following command : mkdocs build","title":"Build documentation"},{"location":"how-to-add-documentation/#deploy-documentation","text":"Once the documentation is build you need to deploy it on github page to do so we run the following command : mkdocs gh-deploy Documentation will be updated on github page and can be accessed at Link","title":"Deploy documentation"}]}